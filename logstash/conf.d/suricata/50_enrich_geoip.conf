filter {
  #
  # enriching geo data
  #
  if [client][ip] {
    cidr {
      address => [ "%{[client][ip]}" ]
      network => [ "0.0.0.0/0" ]
      add_field => {
        "[client][ip_version]" => "IPv4"
        "[network][type]" => "IPv4"
        "[client][geo][country_iso_code]" => "NL"
      }
    }
    if ![client][ip_version] {
      cidr {
        address => [ "%{[client][ip]}" ]
        network => [ "::/0" ]
        add_field => {
          "[client][ip_version]" => "IPv6"
          "[network][type]" => "IPv6"
        } 
      }
    }
  }
  if [server][ip] {
    cidr {
      address => [ "%{[server][ip]}" ]
      network => [ "0.0.0.0/0" ]
      add_field => {
        "[server][ip_version]" => "IPv4"
        "[server][geo][country_iso_code]" => "NL"
      }
    }
    if ![server][ip_version] {
      cidr {
        address => [ "%{[server][ip]}" ]
        network => [ "::/0" ]
        add_field => {
          "[server][ip_version]" => "IPv6"
        } 
      }
    }
  }
  
  # Determine the locality of the traffic and lookup GeoIP, ASN and IP Reputation information.
  if [server][ip] or [client][ip] {
    if [server][ip] {
      cidr {
        address => [ "%{[server][ip]}" ]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => { "[server][as][system]" => "private" }
        add_field => { "[network][as][system]" => "private" }
      }
      # Check to see if dest_autonomous_system exists. If it doesn't the dest_ip didn't match a private address space and must be public.
      if ![server][as][system] {
        mutate {
          replace => { "[server][as][system]" => "public" }
          add_field => { "[network][as][system]" => "public" }
        }
      }
      if [server][as][system] == "public" {
        geoip {
          source => "[server][ip]"
          database => "/etc/logstash/conf.d/geoipdbs/GeoLite2-City.mmdb"
          cache_size => "8192"
          target => "[server][geo]"
          fields => ["city_name", "continent_code", "country_code2", "country_name", "dma_code", "latitude", "longitude", "postal_code", "region_code", "region_name", "timezone"]
        }
        if [server][geo][country_name] {
          if [server][geo][latitude] and [server][geo][longitude] {
            mutate {
              add_field => { "[server][geo][location]" => "%{[server][geo][latitude]},%{[server][geo][longitude]}" }
              remove_field => [ "[server][geo][latitude]","[server][geo][longitude]" ]
              replace => { "[server][geo][country_iso_code]" => "%{[server][geo][country_code2]}" }
            }
            mutate {
              copy => { 
                "[server][geo][city_name]" => "[geo][city_name]"
	        "[server][geo][continent_code]" => "[geo][continent_name]"
                "[server][geo][location]" => "[geo][location]"
                "[server][geo][country_iso_code]" => "[geo][country_iso_code]"
		"[server][geo][country_name]" => "[geo][country_name]"
                "[server][geo][region_code]" => "[geo][region_iso_code]"
	        "[server][geo][region_name]" => "[geo][region_name]"
              }
            }
          }
        }
        geoip {
          source => "[server][ip]"
          database => "/etc/logstash/conf.d/geoipdbs/GeoLite2-ASN.mmdb"
          cache_size => "8192"
          target => "[server][as]"
          fields => ["autonomous_system_number", "autonomous_system_organization"]
        }
        mutate {
         rename => { "[server][as][as_org]" => "[server][as][organization][name]" }
        }
        mutate {
          copy => { 
            "[server][as][asn]" => "[as][number]"
            "[server][as][organization][name]" => "[as][organization][name]"
          }
        }
      }
      # Lookup destination IP reputation.
      translate {
        dictionary_path => "/etc/logstash/conf.d/dictionaries/ip_rep_basic.yml"
        field => "[server][ip]"
        destination => "[network][name]"
      }
    }

    if [client][ip] {
      cidr {
        address => [ "%{[client][ip]}" ]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
        add_field => { "[client][as][system]" => "private" }
        add_field => { "[network][as][system]" => "private" }
      }
      # Check to see if dest_autonomous_system exists. If it doesn't the dest_ip didn't match a private address space and must be public.
      if ![client][as][system] {
        mutate {
          replace => { "[client][as][system]" => "public" }
          add_field => { "[network][as][system]" => "public" }
        }
      }
      if [client][as][system] == "public" {
        geoip {
          source => "[client][ip]"
          database => "/etc/logstash/conf.d/geoipdbs/GeoLite2-City.mmdb"
          cache_size => "8192"
          target => "[client][geo]"
          fields => ["continent_code", "country_code2", "country_code3", "country_name", "dma_code", "latitude", "longitude", "postal_code", "region_code", "region_name", "timezone"]
        }
        if [client][geo][country_name] {
          if [client][geo][latitude] and [client][geo][longitude] {
            mutate {
              add_field => { "[client][geo][location]" => "%{[client][geo][latitude]},%{[client][geo][longitude]}" }
              remove_field => [ "[client][geo][latitude]","[client][geo][longitude]" ]
              replace => { "[client][geo][country_iso_code]" => "%{[client][geo][country_code2]}" }
            }
            mutate {
              copy => { 
                "[client][geo][city_name]" => "[geo][city_name]"
	        "[client][geo][continent_code]" => "[geo][continent_name]"
 	        "[client][geo][location]" => "[geo][location]"
                "[client][geo][country_iso_code]" => "[geo][country_iso_code]"
	        "[client][geo][country_name]" => "[geo][country_name]"
                "[client][geo][region_code]" => "[geo][region_iso_code]"
                "[client][geo][region_name]" => "[geo][region_name]"
              }
            }
          }
        }
        geoip {
          source => "[client][ip]"
          database => "/etc/logstash/conf.d/geoipdbs/GeoLite2-ASN.mmdb"
          cache_size => "8192"
          target => "[client][as]"
          fields => ["autonomous_system_number", "autonomous_system_organization"]
        }
        mutate {
         rename => { "[client][as][as_org]" => "[client][as][organization][name]" }
        }
        mutate {
          copy => { 
            "[client][as][asn]" => "[as][number]"
            "[client][as][organization][name]" => "[as][organization][name]"
          }
        }
      }
    }      
  }
}
