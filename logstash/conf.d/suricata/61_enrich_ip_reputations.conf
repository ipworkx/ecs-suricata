filter {

  # Lookup client IP reputation.
  # Check if the IP is whitelisted for reputation scoring.
  if [client][ip] {
    translate {
      dictionary_path => "/etc/logstash/conf.d/dictionaries/ip_rep_whitelist.yml"
      field => "[client][ip]"
      destination => "[@metadata][src_whitelist]"
      fallback => "false"
      refresh_behaviour => "replace"
    }
    # If not whitelisted, lookup the IP reputation.
    if [@metadata][src_whitelist] == "false" {
      translate {
         dictionary_path => "/etc/logstash/conf.d/dictionaries/ip_rep_basic.yml"
         field => "[client][ip]"
         destination => "[@metadata][src_rep_label]"
         refresh_behaviour => "replace"
      }
      # Parse the IP reputation lable into tags.
      if [@metadata][src_rep_label] {
        ruby {
          init => "require 'csv'"
          code => "event.set('[network][src_rep_tags]', event.get('[@metadata][src_rep_label]').parse_csv)"
        }
      }
    }
  }

  # Lookup server IP reputation.
  # Check if the IP is whitelisted for reputation scoring.
  if [server][ip] {
    translate {
      dictionary_path => "/etc/logstash/conf.d/dictionaries/ip_rep_whitelist.yml"
      field => "[server][ip]"
      destination => "[@metadata][dst_whitelist]"
      fallback => "false"
      refresh_behaviour => "replace"
    }
    # If not whitelisted, lookup the IP reputation.
    if [@metadata][dst_whitelist] == "false" {
      translate {
        dictionary_path => "/etc/logstash/conf.d/dictionaries/ip_rep_basic.yml"
        field => "[server][ip]"
        destination => "[@metadata][dst_rep_label]"
        refresh_behaviour => "replace"
      }
      # Parse the IP reputation lable into tags.
      if [@metadata][dst_rep_label] {
        ruby {
          init => "require 'csv'"
          code => "event.set('[network][dst_rep_tags]', event.get('[@metadata][dst_rep_label]').parse_csv)"
        }
      }
    }
  }
  
  if [network][dst_rep_tags] or [network][src_rep_tags] {
    ruby {
      init => "require 'csv'"
      code => "
        src_tags = event.get('[@metadata][src_rep_label]')
        dst_tags = event.get('[@metadata][dst_rep_label]')

        if (src_tags)
          rep_tags = src_tags
          if (dst_tags)
            rep_tags = rep_tags << ',' << dst_tags
          end
        else (dst_tags)
          rep_tags = dst_tags
        end

        if (rep_tags)
          event.set('[network][reputation_tags]', rep_tags.parse_csv )
        end
      "
    }
  }
}
