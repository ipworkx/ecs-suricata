filter {
  if [suricata][eve] {
    #
    # processing flow data
    #
    if [suricata][eve][flow] {
      # Populate flow.bytes
      if [suricata][eve][flow][bytes_toclient] {
        if [suricata][eve][flow][bytes_toserver] {
          ruby {
            code => "
              event.set( '[suricata][eve][flow][bytes]', event.get('[suricata][eve][flow][bytes_toclient]').to_i + event.get('[suricata][eve][flow][bytes_toserver]').to_i )
              "
           }
        } else {
          mutate {
            rename => { "[suricata][eve][flow][bytes]" => "%{[suricata][eve][flow][bytes_toclient]}" }
          }
        }
      } else if [suricata][eve][flow][bytes_toserver] {
        mutate {
          rename => { "[suricata][eve][flow][bytes]" => "%{[suricata][eve][flow][bytes_toserver]}" }
        }
      }
  
      if [suricata][eve][flow][bytes] {
        mutate {
          convert => { "[suricata][eve][flow][bytes]" => "integer" }
        }
      }

      # Populate flow.pkts
      if [suricata][eve][flow][pkts_toclient] {
        if [suricata][eve][flow][pkts_toserver] {
          ruby {
            code => "
              event.set( '[suricata][eve][flow][pkts]', event.get('[suricata][eve][flow][pkts_toclient]').to_i + event.get('[suricata][eve][flow][pkts_toserver]').to_i )
            "
          }
        } else {
          mutate {
            rename => { "[suricata][eve][flow][pkts]" => "%{[suricata][eve][flow][pkts_toclient]}" }
          }
        }
      } else if [suricata][eve][flow][pkts_toserver] {
        mutate {
          rename => { "[suricata][eve][flow][pkts]" => "%{[suricata][eve][flow][pkts_toserver]}" }
        }
      }  
  
      if [suricata][eve][flow][pkts] {
        mutate {
          convert => { "[suricata][eve][flow][pkts]" => "integer" }
        }
      }

      mutate {
        copy => {
          "[suricata][eve][flow][start]" => "[event][start]"
          "[suricata][eve][flow][end]" => "[event][end]"
          "[suricata][eve][flow][age]" => "[event][duration]"
          "[suricata][eve][flow][bytes_toclient]" => "[server][bytes]"
          "[suricata][eve][flow][bytes_toserver]" => "[client][bytes]"
          "[suricata][eve][flow][pkts_toclient]" => "[server][packets]"
          "[suricata][eve][flow][pkts_toserver]" => "[client][packets]"
        }
      }
      if [event][duration] {
        ruby {
          code => "
            event_duration = event.get('[event][duration]')
            event.set('[event][duration]', event_duration * 1000000)
          "
          tag_on_exception => "_rubyexception-suricata-flow-duration_to_nanoseconds"
        }
      }
 
      # Add bytes so we can get totals
      if [client][bytes] {
        ruby {
          code => "
            src = event.get('[client][bytes]')
            dst = event.get('[server][bytes]')
            # Destination/Server bytes may not always exist, ie: broadcast
            if !dst.nil?
              total = src + dst
            else
              total = src
            end
            event.set('[network][bytes]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_bytes"
        }
      }
     
      # Add packets so we can get totals
      if [client][packets] {
        ruby {
          code => "
            src = event.get('[client][packets]')
            dst = event.get('[server][packets]')
            total = src + dst
            event.set('[network][packets]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_packets"
        }
      }
  

      # Process TCP flags.
      if [suricata][eve][tcp][tcp_flags] {
        if [suricata][eve][tcp][ack] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "ACK" }
          }
        }
        if [suricata][eve][tcp][cwr] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "CWR" }
          }
        }
        if [suricata][eve][tcp][ece] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "ECE" }
          }
        }
        if [suricata][eve][tcp][fin] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "FIN" }
          }
        }
        if [suricata][eve][tcp][psh] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "PSH" }
          }
        }
        if [suricata][eve][tcp][rst] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "RST" }
          }
        }
        if [suricata][eve][tcp][syn] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "SYN" }
          }
        }
        if [suricata][eve][tcp][urg] {
          mutate {
            add_field => { "[suricata][eve][tcp_flags]" => "URG" }
          }
        }
 
        mutate { 
          remove_field => [ "[tcp][ack]", "[tcp][cwr]", "[tcp][ece]", "[tcp][fin]", "[tcp][psh]", "[tcp][rst]", "[tcp][syn]", "[tcp][urg]" ]
        }
      } else {
        mutate {
          replace => { "[suricata][eve][tcp_flags]" => "none" }
        }
      }     
    }
    # Set message.
    mutate {
      replace => { "[message]" => "Suricata:" }
    }
    if [network][transport] {
      mutate {
        replace => { "[message]" => "%{[message]} %{[network][transport]} connection" }
      }
    }
    if [client][ip] {
      mutate {
        replace => { "[message]" => "%{[message]} from %{[client][ip]}" }
      }
      if [client][port] {
        mutate {
          replace => { "[message]" => "%{[message]}:%{[client][port]}" }
        }
      }
    } else if [client][mac] {
      mutate {
        replace => { "[message]" => "%{[message]} from %{[client][mac]}" }
      }
    }
    if [server][ip] {
      mutate {
        replace => { "[message]" => "%{[message]} to %{[server][ip]}" }
      }
      if [server][port] {
        mutate {
          replace => { "[message]" => "%{[message]}:%{[server][port]}" }
        }
      }
    } else if [server][mac] {
      mutate {
        replace => { "[message]" => "%{[message]} to %{[server][mac]}" }
      }
    }
    if [network][bytes] {
      mutate {
        replace => { "[message]" => "%{[message]}, %{[network][bytes]} bytes" }
      }
    }
    if [network][packets] {
      mutate {
        replace => { "[message]" => "%{[message]}, %{[network][packets]} packets" }
      }
    }   
  }
}
